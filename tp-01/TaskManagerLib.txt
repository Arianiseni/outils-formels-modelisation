import PetriKit
 
public func createTaskManager() -> PTNet {

   // Places initiales

   let taskPool    = PTPlace(named: "taskPool")
   let processPool = PTPlace(named: "processPool")
   let inProgress  = PTPlace(named: "inProgress")
 
   // Transitions initiales

   let create      = PTTransition(
       named          : "create",
       preconditions  : [],
       postconditions : [PTArc(place: taskPool)])
   let spawn       = PTTransition(
       named          : "spawn",
       preconditions  : [],
       postconditions : [PTArc(place: processPool)])
   let success     = PTTransition(
       named          : "success",
       preconditions  : [PTArc(place: taskPool), PTArc(place: inProgress)],
       postconditions : [])
   let exec       = PTTransition(
       named          : "exec",
       preconditions  : [PTArc(place: taskPool), PTArc(place: processPool)],
       postconditions : [PTArc(place: taskPool), PTArc(place: inProgress)])
   let fail        = PTTransition(
       named          : "fail",
       preconditions  : [PTArc(place: inProgress)],
       postconditions : [])
 
   // P/T-net

   return PTNet(
       places: [taskPool, processPool, inProgress],
       transitions: [create, spawn, success, exec, fail])
}


// PARTIE 4 : CORRECTION DU PROBLEME

// Ce qu'il se passe ici, c'est qu'on va créer une nouvelle place, où on pourra y placer un jeton
// dès le départ. On va l'appeler Debg_Task
//
// Cette place servira de :
// - pré-condition pour EXEC : Le vrai problème ici, est que la transition EXEC puisse s'exécuter
//   2 fois et conduise à notre erreur. On peut créer cette place, qui étant une pré-condition,
//   permette que EXEC ne lui donne pas de jeton. Ceci implique que EXEC ne pourra être sollicité
//   2 fois.
// - post-condition de SUCCESS : Pour pouvoir confirmer la réussite, on met le jeton dans notre place
//   ce qui permettra ensuite de traier la tâche d'après san en ajouter de trop.
 
 
public func createCorrectTaskManager() -> PTNet {

   // Places initiales avec Debg_Task

   let taskPool    = PTPlace(named: "taskPool")
   let processPool = PTPlace(named: "processPool")
   let inProgress  = PTPlace(named: "inProgress")
   let Debg_Task  = PTPlace(named: "Debg_Task")
 
   // Transitions initiales, changées avec l'arrivée de Debg_Task :

   let create      = PTTransition(
       named          : "create",
       preconditions  : [],
       postconditions : [PTArc(place: taskPool)])

   let spawn       = PTTransition(
       named          : "spawn",
       preconditions  : [],
       postconditions : [PTArc(place: processPool)])

   let success     = PTTransition(
       named          : "success",
       preconditions  : [PTArc(place: taskPool), PTArc(place: inProgress)],
       postconditions : [PTArc(place: Debg_Task)])
// Ici on aperçoit notre place en tant que post-condition

   let exec       = PTTransition(
       named          : "exec",
       preconditions  : [PTArc(place: taskPool), PTArc(place: processPool), PTArc(place: Debg_Task)],
       postconditions : [PTArc(place: taskPool), PTArc(place: inProgress)])
// Ici on aperçoit notre place en tant que pré-condition

   let fail        = PTTransition(
       named          : "fail",
       preconditions  : [PTArc(place: inProgress)],
       postconditions : []

 
   // P/T-net

   return PTNet(
       places: [taskPool, processPool, inProgress, Debg_Task],
       transitions: [create, spawn, success, exec, fail])
}
